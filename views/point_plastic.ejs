<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- <link rel="stylesheet" href="style_point.css"> -->
  <link rel="shortcut icon" type="image/x-icon" href="favicon.png">
  <!-- <script type="text/javascript" src="../js/jquery.fullPage.js"></script> -->
  <!-- <script type="text/javascript" src="../js/fullpage_control.js"></script> -->
  <title>온새미로 - 포인트</title>
</head>

<body>
  <div class="container">
    <div class="menu">
      <!-- 상단 메뉴-->
      <ul>
        <!--로고-->
        <li><a href="/"><img src="logo.png" style="max-width: 80%; height: auto; margin-top:10%; margin-left:20%"></a>
        </li>
        <li></li>
        <li></li>
        <li></li>
        <li><a href="/">홈</a></li>
        <li>
          <div class="dropdown">
            <a href="" class="dropbtn">분리수거 정보</a>
            <div class="dropdown-content">
              <a href="/swc_way">분리수거 방법</a>
              <a href="/swc_reason">분리수거 이유</a>
            </div>
          </div>
        </li>
        <li><a href="/point" style="color:#17242B;">새싹 포인트</a></li>
        <li></li>
        <li id="login_li"><a href="/login">로그인</a></li>
        <li id="signup_li"><a href="/signup">회원가입</a></li>
      </ul>
    </div>
    <div class="content">
      <div>Teachable Machine Image Model</div>
      <button type="button" onclick="init()">Start</button>
      <div id="webcam-container"></div>
      <div id="label-container"></div>
      <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.3.1/dist/tf.min.js"></script>
      <script
        src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@0.8/dist/teachablemachine-image.min.js"></script>
      <script type="text/javascript">
        // More API functions here:
        // https://github.com/googlecreativelab/teachablemachine-community/tree/master/libraries/image

        // the link to your model provided by Teachable Machine export panel
        const URL = "./my_model/";

        let model, webcam, labelContainer, maxPredictions;

        // Load the image model and setup the webcam
        async function init() {
          const modelURL = URL + "model.json";
          const metadataURL = URL + "metadata.json";

          // load the model and metadata
          // Refer to tmImage.loadFromFiles() in the API to support files from a file picker
          // or files from your local hard drive
          // Note: the pose library adds "tmImage" object to your window (window.tmImage)
          model = await tmImage.load(modelURL, metadataURL);
          maxPredictions = model.getTotalClasses();

          // Convenience function to setup a webcam
          const flip = true; // whether to flip the webcam
          webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
          await webcam.setup(); // request access to the webcam
          await webcam.play();
          window.requestAnimationFrame(loop);

          // append elements to the DOM
          document.getElementById("webcam-container").appendChild(webcam.canvas);
          labelContainer = document.getElementById("label-container");
          for (let i = 0; i < maxPredictions; i++) { // and class labels
            labelContainer.appendChild(document.createElement("div"));
          }
        }

        async function loop() {
          webcam.update(); // update the webcam frame
          await predict();
          window.requestAnimationFrame(loop);
        }

        // run the webcam image through the image model
        async function predict() {
          // predict can take in an image, video or canvas html element
          const prediction = await model.predict(webcam.canvas);
          for (let i = 0; i < maxPredictions; i++) {
            const classPrediction =
              prediction[i].className + ": " + prediction[i].probability.toFixed(2);
            labelContainer.childNodes[i].innerHTML = classPrediction;
          }
        }
      </script>

    </div>
  </div>
  <div class="footer">
    <div class="footer_element">
      <img src="logo.png" style="max-width: 130px; height: auto;"><br>
      ©2021 by Jiyoon Park and Sukmin Lee
    </div>
    <div class="footer_element">
      Tel) 010 5135 4735 | 010 6292 4267<br>
      Email) s2019s12@e-mirim.hs.kr | s2019s16@e-mirim.hr.kr<br>
      Address) Mirim Girl's Information and Science High School<br>
    </div>
    <div class="footer_element">
      <a href="https://github.com/saigjiej/Friendly-Tree" class="footer_link">Source Code</a><br>
      <a href="https://github.com/saigjiej/Friendly-Tree" class="footer_link">Github Link</a>
    </div>
  </div>
  <script type="text/javascript" src="login_confirm.js"></script>
</body>

</html>